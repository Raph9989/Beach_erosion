% Test proxy evolution cross shore du trait de cote : 

% Modele general(volumes>PHMA / Runup>PHMA)

clear all
close all
% Variables fixes
% correction zéro H avec IGN selon le port de ref
corr1 = -2.831; % Port-Bloc
corr2 = -1.981; % Arcachon
corr3 = -1,98 ; % Cap Ferret
corr4 = -2.174; % Saint-Jean-De-Luz
% correction niveau moyen en zéro H
nmzh1 = 3.33; %Port Bloc
nmzh2 = 2.53; %Bayonne
nmzh3 = 2.37; %cap ferret
% prof bouées
profcap = 54 ; % profondeur sous la bouée au Cap-Ferret
profang = 50 ;% profondeur sous la bouée à Anglet
profluz = 20 ;% profondeur sous la bouée à Saint-Jean-De-Luz
% constantes
g = 9.81;
densi= 1025;
borneNM = 0.39 ;
bornePMVE = 2.22 ;

%Chargement 2009
for y=9;
  eval(['Dir=''E:\BRGM\data\Données\200' num2str(y),'\''']);

for i =1:9;
    eval(['fnc' num2str(i),'=[Dir,''ww3.200' num2str(y),'0' num2str(i),'_hs.nc''];']);
    eval(['fncFP' num2str(i),'=[Dir,''ww3.200' num2str(y),'0' num2str(i),'_fp.nc''];']);

    
        eval(['t' num2str(i),'=ncread(fnc' num2str(i),',''time'');']); 
        eval(['time' num2str(i),'=(datenum(1990,0,1)+t' num2str(i),');'])
end

for i =10:12;
    eval(['fnc' num2str(i),'=[Dir,''ww3.200' num2str(y),'' num2str(i),'_hs.nc''];']);
    eval(['fncFP' num2str(i),'=[Dir,''ww3.200' num2str(y),'' num2str(i),'_fp.nc''];']);

    
        eval(['t' num2str(i),'=ncread(fnc' num2str(i),',''time'');']); 
        eval(['time' num2str(i),'=(datenum(1990,0,1)+t' num2str(i),');'])
end
lat=ncread(fnc1,'latitude');
lon=ncread(fnc1,'longitude');
ni= findnearest(44.6525,lat,0);
nj= findnearest(-1.45,lon,0);%bouée Cap Ferret

for i =1:12;
eval(['Hs' num2str(i),'  = squeeze(ncread(fnc' num2str(i),',''hs'',[nj ni 1],[1 1 Inf]));'])
eval(['Fp' num2str(i),'  = squeeze(ncread(fncFP' num2str(i),',''fp'',[nj ni 1],[1 1 Inf]));'])

end
eval(['HS200' num2str(y),'=[Hs1;Hs2;Hs3;Hs4;Hs5;Hs6;Hs7;Hs8;Hs9;Hs10;Hs11;Hs12];'])
eval(['FP200' num2str(y),'=[Fp1;Fp2;Fp3;Fp4;Fp5;Fp6;Fp7;Fp8;Fp9;Fp10;Fp11;Fp12];'])
eval(['TIME200' num2str(y),'=[time1;time2;time3;time4;time5;time6;time7;time8;time9;time10;time11;time12];'])
end

%Chargement 2010-2013
for y=10:13;
  eval(['Dir=''E:\BRGM\data\Données\20' num2str(y),'\''']);

for i =1:9;
    eval(['fnc' num2str(i),'=[Dir,''ww3.20' num2str(y),'0' num2str(i),'_hs.nc''];']);
    eval(['fncFP' num2str(i),'=[Dir,''ww3.20' num2str(y),'0' num2str(i),'_fp.nc''];']);

        eval(['t' num2str(i),'=ncread(fnc' num2str(i),',''time'');']); 
        eval(['time' num2str(i),'=(datenum(1990,0,1)+t' num2str(i),');'])
end

for i =10:12;
    eval(['fnc' num2str(i),'=[Dir,''ww3.20' num2str(y),'' num2str(i),'_hs.nc''];']);
    eval(['fncFP' num2str(i),'=[Dir,''ww3.20' num2str(y),'' num2str(i),'_fp.nc''];']);

        eval(['t' num2str(i),'=ncread(fnc' num2str(i),',''time'');']); 
        eval(['time' num2str(i),'=(datenum(1990,0,1)+t' num2str(i),');'])
end
lat=ncread(fnc1,'latitude');
lon=ncread(fnc1,'longitude');
ni= findnearest(44.6525,lat,0);
nj= findnearest(-1.45,lon,0);%bouée Cap Ferret

for i =1:12;
eval(['Hs' num2str(i),'  = squeeze(ncread(fnc' num2str(i),',''hs'',[nj ni 1],[1 1 Inf]));'])
eval(['Fp' num2str(i),'  = squeeze(ncread(fncFP' num2str(i),',''fp'',[nj ni 1],[1 1 Inf]));'])

end
eval(['HS20' num2str(y),'=[Hs1;Hs2;Hs3;Hs4;Hs5;Hs6;Hs7;Hs8;Hs9;Hs10;Hs11;Hs12];'])
eval(['FP20' num2str(y),'=[Fp1;Fp2;Fp3;Fp4;Fp5;Fp6;Fp7;Fp8;Fp9;Fp10;Fp11;Fp12];'])
eval(['TIME20' num2str(y),'=[time1;time2;time3;time4;time5;time6;time7;time8;time9;time10;time11;time12];'])
end


HST=[HS2009;HS2010;HS2011;HS2012;HS2013];%;HS2014;HS2015];
FPT=[FP2009;FP2010;FP2011;FP2012;FP2013];
TIMET=[TIME2009;TIME2010;TIME2011;TIME2012;TIME2013];%;TIME2014;TIME2015];
TP=1./FPT;




%Chargement des niveaux d'eau : 
for y=9;
  Dir='F:\BRGM\data\Niveaux\SERIES_TEMPO\';
    for i=1:7
    eval(['fncn' num2str(y),'=[Dir,''Niveaux_mars_200' num2str(y),'_' num2str(i),'.nc''];'])
    eval(['tn' num2str(y),'_' num2str(i),'=ncread(fncn' num2str(y),',''time'');'])
    eval(['timen' num2str(y),'_' num2str(i),'=(datenum(1900,0,1,0,0,0)+tn' num2str(y),'_' num2str(i),'/86400);'])
    eval(['XE' num2str(y),'_' num2str(i),'=squeeze(ncread(fncn' num2str(y),',''XE''));'])
    end
end
for y=10:13;
  Dir='F:\BRGM\data\Niveaux\SERIES_TEMPO\';
    for i=1:3
    eval(['fncn' num2str(y),'=[Dir,''Niveaux_mars_20' num2str(y),'_' num2str(i),'.nc''];'])
    eval(['tn' num2str(y),'_' num2str(i),'=ncread(fncn' num2str(y),',''time'');'])
    eval(['timen' num2str(y),'_' num2str(i),'=(datenum(1900,0,1,0,0,0)+tn' num2str(y),'_' num2str(i),'/86400);'])
    eval(['XE' num2str(y),'_' num2str(i),'=squeeze(ncread(fncn' num2str(y),',''XE''));'])

    end
end
XE=[XE9_1;XE9_2;XE9_3;XE9_4;XE9_5;XE9_6;XE9_7;XE10_1;XE10_2;XE10_3;XE11_1;XE11_2;XE11_3;XE12_1;XE12_2;XE12_3;XE13_1;XE13_2;XE13_3];
TIMEN=[timen9_1;timen9_2;timen9_3;timen9_4;timen9_5;timen9_6;timen9_7;timen10_1;timen10_2;timen10_3;timen11_1;timen11_2;timen11_3;timen12_1;timen12_2;timen12_3;timen13_1;timen13_2;timen13_3]%;timen14_1;timen14_2;timen14_3;timen15_1;timen15_2;timen15_3];
%interpolation vagues / niveaux
XE_int=interp1(TIMEN,XE,TIMET);




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DEF EVENEMENT ET   S E U I L   D E    S E L E C T I O N 
seuil1=quantile(HST,0.95);      %Seuil hauteur max
seuil2=quantile(HST,0.75);      %Seuil début /fin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


h_evenement=HST(find(HST>seuil1));
t_evenement=TIMET(find(HST>seuil1));


% interpoltion (pour aider à la determination du début et de la fin de
% l'évènement).
time_i=linspace(min(TIMET),max(TIMET), length(TIMET)*5);
hs_i=interp1(TIMET,HST,time_i);

X=time_i(hs_i>(seuil2-0.05)& hs_i<(seuil2+0.05));

%Boucle pour trouver le début(START) et la fin (STOP) de chaque evenement
TT=length(t_evenement);
for i =1:TT;
     if isempty (findnearest(t_evenement(i),X,+1))==0;
    if isempty (findnearest(t_evenement(i),X,-1))==0;
    STOP(i) =findnearest(t_evenement(i),X,1);
    START(i) =findnearest(t_evenement(i),X,-1);
    end
    end
end


START(find(START==0))=[];
STOP(find(STOP==0))=[];
START=unique(START);
STOP=unique(STOP);

for i =1:length(START)
    t_start(i)=findnearest(X(START(i)),TIMET);
    t_stop(i)=findnearest(X(STOP(i)),TIMET);
end

%Niveau d'eaux final apres corrections : 
setup=XE_int; 
nivevagmo=setup %+nmzh3 +corr3  

%MORPHO
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%TRAITEMENT TRUC VERT%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

a=load('E:\BRGM\data\Données\morpho\Profils TV + bisca\TRUCVERT\TrucVert_OCA.mat');
t_profil=a.date;
x=a.x;
z=a.z;
ini=findnearest(TIMET(1),t_profil,1);
fin=findnearest(max(TIMET),t_profil);

% Profil moyen
k=ini : fin;
for j=1:length(x)
Zmoy(j)=mean(z(k,j));
end
%enleve les NaN
stop=min(find(isnan(Zmoy)==1));
Zmoy(stop:end)=[];
z(:,stop:end)=[];
x(:,stop:end)=[];

Int_moy=trapz(x,Zmoy)

%Synchronise temps vague/profil (plus simple pour les plots)
HST(findnearest(max(t_profil),TIMET)+1 : length(TIMET))=[];
FP(findnearest(max(t_profil),TIMET)+1 : length(TIMET))=[];
TP(findnearest(max(t_profil),TIMET)+1 : length(TIMET))=[];
TIMET(findnearest(max(t_profil),TIMET)+1 : length(TIMET))=[];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%chargement des profils en fct du temps : %%%%%%%%%%
 for n= 1:length(TIMET) ;
    
    ind=findnearest( TIMET(n),t_profil,-1);
    ELE=z(ind,:);
    DIST=x;
%%%%%%%%%%%%%%%%%%%%%%Seuil d'integration de E %%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                           beta = 2.14; % PHMA%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Xdown=findnearest(beta,ELE,-1);
Xup=findnearest(beta,ELE,1);
Xf(n)=interp1([ELE(Xup),ELE(Xdown)],[DIST(Xup),DIST(Xdown)],beta);
 

   % k = 1;
  %  Recul(n) = R1 ;    
      %%% Calcul de la pente %%% (monte à 85% -> bizard ->essayer avec +ou
      %%% - 2 ecarts types, comme préconisé par stockdon 2006
      if (nivevagmo(n))< min(ELE)% % pas de calcul de pente si le niveau n'atteint pas la fin du profils ou dépasse la crête
                penteS(n) = NaN;

               
      else
                Xdown = findnearest(nivevagmo(n),ELE,-1);
                Xup = findnearest(nivevagmo(n),ELE,1);
                
                borneinf(n) = interp1([ELE(Xup),ELE(Xdown)],[DIST(Xup),DIST(Xdown)],nivevagmo(n));
                
                Xdown = findnearest(4,ELE,-1);
                Xup = findnearest(4,ELE,1);
                bornesup(n) = interp1([ELE(Xup),ELE(Xdown)],[DIST(Xup),DIST(Xdown)],4);
                
                penteS(n) = abs((4-nivevagmo(n))/(borneinf(n)-bornesup(n)));
      end
     
            %%% Conversion de la longueur d'onde en fonction de la periode et
            %%% de la profondeur
            Tz(n) = TP(n);
            freqs_rad(n) =(1/Tz(n))*2*pi; %PULSATION
            a0(n) = ((freqs_rad(n) .*freqs_rad(n)).*50)./g;
            Xn(n) = a0(n);
            Xn_old(n) = Xn(n) - 1000;
            
            % r = ones(ny,nx);
            r = 1 ;
            while (max(r)==1) % méthode de Newton-Raphson
                r = (abs((Xn(n)-Xn_old(n))./Xn(n))>0.00000001);
                f1(n) = Xn(n).*tanh(Xn(n)) - a0(n);
                f2(n) = tanh(Xn(n))+Xn(n).*(1./cosh(Xn(n))).^2 ;            
                Xn_old(n) = Xn(n);
                Xn(n) = Xn(n) - f1(n)./f2(n);
            end
            
            waven(n) = Xn(n)/50;
            Lo(n)=(1./waven(n))*(2*pi);
            Lo_inf(n) = (g*TP(n)^2)/(2*pi);
            
            %coefficient de Shoaling Modèle
            tempS(n)=(2*pi*50/Lo_inf(n));
            KsS(n)=sqrt(1/(tanh(tempS(n))*(1+2*tempS(n)/sinh(2*tempS(n)))));
            HoS(n) = HST(n)/KsS(n);
            
            % Calcul final du setup
            IrrS(n,1) = penteS(n) / sqrt(HoS(n)/Lo_inf(n));
            
            if isnan(IrrS(n,1))
                runupS(n) = NaN ; 
            elseif (IrrS(n,1) < 0.3)%dissipative 
                runupS(n) = 0.043.*sqrt(HoS(n).*Lo(n));   
            elseif (IrrS(n,1) >= 0.3)%intermédiaire   
                runupS(n) = 1.1.*(0.35.*penteS(n).*sqrt(HoS(n).*Lo(n)) + ((sqrt(HoS(n).*Lo(n).*(0.563.*(penteS(n).^2)+0.004)))/2));    
            end
            
            % Niveau modèle, marée + surcôte + runup
            waterlvlmomS(n,1) = nivevagmo(n) + runupS(n);
            Select(n,1)= runupS(n);
            
             % calcul de l'indicateur
            if isempty (findnearest(waterlvlmomS(n),ELE,-1))==1
                 SCWmS(n)= NaN;
            elseif isempty (findnearest(waterlvlmomS(n),ELE,1))==1
                 SCWmS(n)= NaN;
                
            elseif isnan(waterlvlmomS(n));
 
                SCWmS(n)= NaN; % pas de calcul si pas de niveau (pente = NaN)
                
            else
                Xdown = findnearest(waterlvlmomS(n),ELE,-1);
                Xup = findnearest(waterlvlmomS(n),ELE,1);
                indicewlmom2S(n) = interp1([ELE(Xup),ELE(Xdown)],[DIST(Xup),DIST(Xdown)],waterlvlmomS(n));
                SCWmS(n) =indicewlmom2S(n)-Xf(n); 
                
         %       down = findnearest(Select(n),ELE,-1);
          %      Xup = findnearest(Select(n),ELE,1);
           %     Storm_Select(n) = interp1([ELE(Xup),ELE(Xdown)],[DIST(Xup),DIST(Xdown)],Select(n));
            %    SCW_runup(n) =Storm_Select(n)-Xf(n); 
   
            end  
            end

  SCWmS(find(SCWmS==0))=nan;
  
  %Permet de ne regarder l'energie que lorsque on est en condition tempête.
 New_TIMET=zeros(1,length(TIMET));
 New_HST=zeros(1,length(HST)); 
 for i =1:length(START)
    t_start(i)=findnearest(X(START(i)),TIMET);
    t_stop(i)=findnearest(X(STOP(i)),TIMET);
    New_TIMET(t_start(i):t_stop(i))=TIMET(t_start(i):t_stop(i)); % vecteur temps en conditions tempête
    New_HST(t_start(i):t_stop(i))=HST(t_start(i):t_stop(i));
end
 

                               
%Calcul du temps d'integration de l'energie/puissance:
for j= 1: length(TIMET)
    En(j) = (1/16* densi*g *(New_HST(j)^2))*3; 
    Pu(j)=((1/(64*pi))*densi*(g^2)*(New_HST(j)^2)*TP(j))*3;
end

ss=find(SCWmS<0 );

EN=zeros(1,length(TIMET));
PU=zeros(1,length(TIMET));
EN(ss)=En(ss);
PU(ss)=Pu(ss);
for i=ini:fin-1  
ti=findnearest(t_profil(i),TIMET);
tf=findnearest(t_profil(i+1),TIMET);
ENC(i)=sum(EN(ti:tf));
PUC(i)=sum(PU(ti:tf));
ECC(ti:tf)=ENC(i);%ECC valeur pour visualiser les Energies
PUCC(ti:tf)=PUC(i);%PUCC valeur pour visualiser les Puissance
end
en=ENC; %pour proxy
ENC(1:ini-1)=[]%ENC, valeur à retenir pour comparer aux volumes
PUC(1:ini-1)=[]%PUC, valeur à retenir pour comparer aux volumes
en(1:ini-1)=0;
ENC=ENC/1000000; %passage de J à MJ
PUC=PUC/1000000; %passage de W à MW
en=en/1000000; %passage de J à MJ



%%%%%%%%%%%%% P R O X Y %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for i=ini:fin
Int(i)=trapz(x,z(i,:)); %Volume en stock avant la tempête
Proxy(i)=x(findnearest(2.54,z(i,:))); %Proxy PHMA
end
for i=ini:fin-1
V_err(i)=Int(i)-Int(i+1); % Volume erodé pendant la tempête
Recul(i)=Proxy(i)-Proxy(i+1) % Evolution cross-sh de la PHMA
end
int=Int %Pour proxy
Int(1:ini-1)=[];
V_err(1:ini-1)=[];
Proxy(1:ini-1)=[];
Recul(1:ini-1)=[];
%Supression des valeurs pour lesquelles le runup ne dépasse pas le seuil:
oo=find(ENC==0);
ENC(oo)=[];
en(oo)=0;
V_err(oo)=[];
PUC(oo)=[];
Int(oo)=[];
Recul(oo)=[];
Int(length(Int))=[]; %permet d'uniformiser les volumes errodés et dispos
int(length(int))=[]
VSup=find(Int>Int_moy);
VInf=find( Int<Int_moy);

vsup=find(int>Int_moy);
vinf=find(int<Int_moy);

p=polyfit(ENC,Recul,1);
%%%%%%%%%%%%%%MODELE%%%%%%%%%%%%
COEFF_Mod=p % MODELE%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%Regression engraissée
p=polyfit(ENC(VSup),V_err(VSup),1);
pSup=p; % modèle pour profils engraissés


%Regression erodée
p=polyfit(ENC(VInf),V_err(VInf),1);
pInf=p; % modèle pour profils érodés

%Proxy modéliser
ReculThSup=pSup(1)*en +pSup(2)
ReculThInf=pInf(1)*en +pInf(2)

proxy(ini)=x(findnearest(2.54,z(ini,:))); %Proxy PHMA
for i=ini:fin-1
    if int(i)<Int_moy
proxy(i+1)=proxy(i)- ReculThInf(i)
    elseif int(i)>Int_moy
proxy(i+1)=proxy(i)- ReculThSup(i)
    end
end
figure
plot(t_profil(ini:fin),proxy(ini:fin),'LineWidth',2)


%Proxy mesuré
for i =ini:fin
proxy_Exp(i)=x(findnearest(2.54,z(i,:)))
end
hold on
plot(t_profil(ini:fin),proxy_Exp(ini:fin),'r','LineWidth',2)


clearvars -except  COEFF_Mod seuil1 seuil2 Int_moy  pSup pInf


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%P R E V I S I O N S %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Variables fixes
% correction zéro H avec IGN selon le port de ref
corr1 = -2.831; % Port-Bloc
corr2 = -1.981; % Arcachon
corr3 = -1,98 ; % Cap Ferret
corr4 = -2.174; % Saint-Jean-De-Luz
% correction niveau moyen en zéro H
nmzh1 = 3.33; %Port Bloc
nmzh2 = 2.53; %Bayonne
nmzh3 = 2.37; %cap ferret
% prof bouées
profcap = 54 ; % profondeur sous la bouée au Cap-Ferret
profang = 50 ;% profondeur sous la bouée à Anglet
profluz = 20 ;% profondeur sous la bouée à Saint-Jean-De-Luz
% constantes
g = 9.81;
densi= 1025;
borneNM = 0.39 ;
bornePMVE = 2.22 ;


%Ajout manuel du 2 dernier jours de  décembre 2013 car le paquet 'GERARD/ Christina /Hercules commence
%le 30/12 et finit le 09/01. Sinon gros écart ds les résultats
%Chargement des données hydro : 

for y=13;
  eval(['Dir=''E:\BRGM\data\Données\20' num2str(y),'\''']);

for i =12;
    eval(['fnc' num2str(i),'=[Dir,''ww3.20' num2str(y),'' num2str(i),'_hs.nc''];']);
    eval(['fncFP' num2str(i),'=[Dir,''ww3.20' num2str(y),'' num2str(i),'_fp.nc''];']);

        eval(['t' num2str(i),'=ncread(fnc' num2str(i),',''time'');']); 
        eval(['time' num2str(i),'=(datenum(1990,0,1)+t' num2str(i),');'])
end
lat=ncread(fnc12,'latitude');
lon=ncread(fnc12,'longitude');
ni= findnearest(44.6525,lat,0);
nj= findnearest(-1.45,lon,0);%bouée Cap Ferret

for i =12;
eval(['Hs' num2str(i),'  = squeeze(ncread(fnc' num2str(i),',''hs'',[nj ni 1],[1 1 Inf]));'])
eval(['Fp' num2str(i),'  = squeeze(ncread(fncFP' num2str(i),',''fp'',[nj ni 1],[1 1 Inf]));'])

end
eval(['HS20' num2str(y),'=[Hs12];'])
eval(['FP20' num2str(y),'=[Fp12];'])
eval(['TIME20' num2str(y),'=[time12];'])
end
HS2013=HS2013(236:end);
TIME2013=TIME2013(236:end);
FP2013=FP2013(236:end);

%Chargement 2014-15
for y=14:15;
  eval(['Dir=''E:\BRGM\data\Données\20' num2str(y),'\''']);

for i =1:9;
    eval(['fnc' num2str(i),'=[Dir,''ww3.20' num2str(y),'0' num2str(i),'_hs.nc''];']);
    eval(['fncFP' num2str(i),'=[Dir,''ww3.20' num2str(y),'0' num2str(i),'_fp.nc''];']);

        eval(['t' num2str(i),'=ncread(fnc' num2str(i),',''time'');']); 
        eval(['time' num2str(i),'=(datenum(1990,0,1)+t' num2str(i),');'])
end

for i =10:12;
    eval(['fnc' num2str(i),'=[Dir,''ww3.20' num2str(y),'' num2str(i),'_hs.nc''];']);
    eval(['fncFP' num2str(i),'=[Dir,''ww3.20' num2str(y),'' num2str(i),'_fp.nc''];']);

        eval(['t' num2str(i),'=ncread(fnc' num2str(i),',''time'');']); 
        eval(['time' num2str(i),'=(datenum(1990,0,1)+t' num2str(i),');'])
end
lat=ncread(fnc1,'latitude');
lon=ncread(fnc1,'longitude');
ni= findnearest(44.6525,lat,0);
nj= findnearest(-1.45,lon,0);%bouée Cap Ferret

for i =1:12;
eval(['Hs' num2str(i),'  = squeeze(ncread(fnc' num2str(i),',''hs'',[nj ni 1],[1 1 Inf]));'])
eval(['Fp' num2str(i),'  = squeeze(ncread(fncFP' num2str(i),',''fp'',[nj ni 1],[1 1 Inf]));'])

end
eval(['HS20' num2str(y),'=[Hs1;Hs2;Hs3;Hs4;Hs5;Hs6;Hs7;Hs8;Hs9;Hs10;Hs11;Hs12];'])
eval(['FP20' num2str(y),'=[Fp1;Fp2;Fp3;Fp4;Fp5;Fp6;Fp7;Fp8;Fp9;Fp10;Fp11;Fp12];'])
eval(['TIME20' num2str(y),'=[time1;time2;time3;time4;time5;time6;time7;time8;time9;time10;time11;time12];'])
end

%niveau

for y=13;
  Dir='F:\BRGM\data\Niveaux\SERIES_TEMPO\';
    for i=3
    eval(['fncn' num2str(y),'=[Dir,''Niveaux_mars_20' num2str(y),'_' num2str(i),'.nc''];'])
    eval(['tn' num2str(y),'_' num2str(i),'=ncread(fncn' num2str(y),',''time'');'])
    eval(['timen' num2str(y),'_' num2str(i),'=(datenum(1900,0,1,0,0,0)+tn' num2str(y),'_' num2str(i),'/86400);'])
    eval(['XE' num2str(y),'_' num2str(i),'=squeeze(ncread(fncn' num2str(y),',''XE''));'])
    end
    end
%2014-2015
for y=14:15;
  Dir='F:\BRGM\data\Niveaux\SERIES_TEMPO\';
    for i=1:3
    eval(['fncn' num2str(y),'=[Dir,''Niveaux_mars_20' num2str(y),'_' num2str(i),'.nc''];'])
    eval(['tn' num2str(y),'_' num2str(i),'=ncread(fncn' num2str(y),',''time'');'])
    eval(['timen' num2str(y),'_' num2str(i),'=(datenum(1900,0,1,0,0,0)+tn' num2str(y),'_' num2str(i),'/86400);'])
    eval(['XE' num2str(y),'_' num2str(i),'=squeeze(ncread(fncn' num2str(y),',''XE''));'])

    end
end

HST=[HS2013;HS2014;HS2015];
FPT=[FP2013;FP2014;FP2015];
TIMET=[TIME2013;TIME2014;TIME2015];
TP=1./FPT;

XE=[XE13_3;XE14_1;XE14_2;XE14_3;XE15_1;XE15_2;XE15_3];
TIMEN=[timen13_3;timen14_1;timen14_2;timen14_3;timen15_1;timen15_2;timen15_3];

XE_int=interp1(TIMEN,XE,TIMET);

h_evenement=HST(find(HST>seuil1));
t_evenement=TIMET(find(HST>seuil1));


% interpoltion (pour aider à la determination du début et de la fin de
% l'évènement).
time_i=linspace(min(TIMET),max(TIMET), length(TIMET)*5);
hs_i=interp1(TIMET,HST,time_i);

X=time_i(hs_i>(seuil2-0.05)& hs_i<(seuil2+0.05));

%Boucle pour trouver le début(START) et la fin (STOP) de chaque evenement
TT=length(t_evenement);


for i =2:TT;
     if isempty (findnearest(t_evenement(i),X,+1))==0;
    if isempty (findnearest(t_evenement(i),X,-1))==0;
    STOP(i) =findnearest(t_evenement(i),X,1);
    START(i) =findnearest(t_evenement(i),X,-1);
    end
    end
end


START(find(START==0))=[];
STOP(find(STOP==0))=[];
START=unique(START);
STOP=unique(STOP);

for i =1:length(START)
    t_start(i)=findnearest(X(START(i)),TIMET);
    t_stop(i)=findnearest(X(STOP(i)),TIMET);
end

%Niveau d'eaux final apres corrections : 
setup=XE_int; %a changer quand je l'aurait
nivevagmo=setup %+nmzh3 +corr3  
%Pour calul de la pente  sur +/6 2 ecarts typmes : 

%MORPHO
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%TRAITEMENT TRUC VERT%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

a=load('E:\BRGM\data\Données\morpho\Profils TV + bisca\TRUCVERT\TrucVert_OCA.mat');
t_profil=a.date;
x=a.x;
z=a.z;
ini=findnearest(TIMET(1),t_profil,1);
fin=findnearest(max(TIMET),t_profil);



% Profil moyen
k=ini : fin
for j=1:length(x)
Zmoy(j)=mean(z(k,j));
end
%enleve les NaN
stop=min(find(isnan(Zmoy)==1));
Zmoy(stop:end)=[];
z(:,stop:end)=[];
x(:,stop:end)=[];



%Synchronise temps vague/profil (plus simple pour les plots)
HST(findnearest(max(t_profil),TIMET)+1 : length(TIMET))=[];
FPT(findnearest(max(t_profil),TIMET)+1 : length(TIMET))=[];
TP(findnearest(max(t_profil),TIMET)+1 : length(TIMET))=[];
TIMET(findnearest(max(t_profil),TIMET)+1 : length(TIMET))=[];

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%chargement des profils en fct du temps : %%%%%%%%%%
 for n= 1:length(TIMET) ;
    
    ind=findnearest( TIMET(n),t_profil,-1);
    ELE=z(ind,:);
    DIST=x;
%%%%%%%%%%%%%%%%%%%%%%Seuil d'integration de E %%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                           beta = 2.14; %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Xdown=findnearest(beta,ELE,-1);
Xup=findnearest(beta,ELE,1);
Xf(n)=interp1([ELE(Xup),ELE(Xdown)],[DIST(Xup),DIST(Xdown)],beta);
 

   % k = 1;
  %  Recul(n) = R1 ;    
      %%% Calcul de la pente %%% (monte à 85% -> bizard ->essayer avec +ou
      %%% - 2 ecarts types, comme préconisé par stockdon 2006
      if (nivevagmo(n))< min(ELE)% % pas de calcul de pente si le niveau n'atteint pas la fin du profils ou dépasse la crête
                penteS(n) = NaN;

               
      else
                Xdown = findnearest(nivevagmo(n),ELE,-1);
                Xup = findnearest(nivevagmo(n),ELE,1);
                
                borneinf(n) = interp1([ELE(Xup),ELE(Xdown)],[DIST(Xup),DIST(Xdown)],nivevagmo(n));
                
                Xdown = findnearest(4,ELE,-1);
                Xup = findnearest(4,ELE,1);
                bornesup(n) = interp1([ELE(Xup),ELE(Xdown)],[DIST(Xup),DIST(Xdown)],4);
                
                penteS(n) = abs((4-nivevagmo(n))/(borneinf(n)-bornesup(n)));
      end
     
            %%% Conversion de la longueur d'onde en fonction de la periode et
            %%% de la profondeur
            Tz(n) = TP(n);
            freqs_rad(n) =(1/Tz(n))*2*pi; %PULSATION
            a0(n) = ((freqs_rad(n) .*freqs_rad(n)).*50)./g;
            Xn(n) = a0(n);
            Xn_old(n) = Xn(n) - 1000;
            
            % r = ones(ny,nx);
            r = 1 ;
            while (max(r)==1) % méthode de Newton-Raphson
                r = (abs((Xn(n)-Xn_old(n))./Xn(n))>0.00000001);
                f1(n) = Xn(n).*tanh(Xn(n)) - a0(n);
                f2(n) = tanh(Xn(n))+Xn(n).*(1./cosh(Xn(n))).^2 ;            
                Xn_old(n) = Xn(n);
                Xn(n) = Xn(n) - f1(n)./f2(n);
            end
            
            waven(n) = Xn(n)/50;
            Lo(n)=(1./waven(n))*(2*pi);
            Lo_inf(n) = (g*TP(n)^2)/(2*pi);
            
            %coefficient de Shoaling Modèle
            tempS(n)=(2*pi*50/Lo_inf(n));
            KsS(n)=sqrt(1/(tanh(tempS(n))*(1+2*tempS(n)/sinh(2*tempS(n)))));
            HoS(n) = HST(n)/KsS(n);
            
            % Calcul final du setup
            IrrS(n,1) = penteS(n) / sqrt(HoS(n)/Lo_inf(n));
            
            if isnan(IrrS(n,1))
                runupS(n) = NaN ; 
            elseif (IrrS(n,1) < 0.3)%dissipative 
                runupS(n) = 0.043.*sqrt(HoS(n).*Lo(n));   
            elseif (IrrS(n,1) >= 0.3)%intermédiaire   
                runupS(n) = 1.1.*(0.35.*penteS(n).*sqrt(HoS(n).*Lo(n)) + ((sqrt(HoS(n).*Lo(n).*(0.563.*(penteS(n).^2)+0.004)))/2));    
            end
            
            % Niveau modèle, marée + surcôte + runup
            waterlvlmomS(n,1) = nivevagmo(n) + runupS(n);
            Select(n,1)= runupS(n);
            
             % calcul de l'indicateur
            if isempty (findnearest(waterlvlmomS(n),ELE,-1))==1
                 SCWmS(n)= NaN;
            elseif isempty (findnearest(waterlvlmomS(n),ELE,1))==1
                 SCWmS(n)= NaN;
                
            elseif isnan(waterlvlmomS(n));
 
                SCWmS(n)= NaN; % pas de calcul si pas de niveau (pente = NaN)
                
            else
                Xdown = findnearest(waterlvlmomS(n),ELE,-1);
                Xup = findnearest(waterlvlmomS(n),ELE,1);
                indicewlmom2S(n) = interp1([ELE(Xup),ELE(Xdown)],[DIST(Xup),DIST(Xdown)],waterlvlmomS(n));
                SCWmS(n) =indicewlmom2S(n)-Xf(n); 
                
         %       down = findnearest(Select(n),ELE,-1);
          %      Xup = findnearest(Select(n),ELE,1);
           %     Storm_Select(n) = interp1([ELE(Xup),ELE(Xdown)],[DIST(Xup),DIST(Xdown)],Select(n));
            %    SCW_runup(n) =Storm_Select(n)-Xf(n); 
   
            end  
            end

  SCWmS(find(SCWmS==0))=nan;
  
  %Permet de ne regarder l'energie que lorsque on est en condition tempête.
 New_TIMET=zeros(1,length(TIMET));
 New_HST=zeros(1,length(HST)); 
 for i =1:length(START)
    t_start(i)=findnearest(X(START(i)),TIMET);
    t_stop(i)=findnearest(X(STOP(i)),TIMET);
    New_TIMET(t_start(i):t_stop(i))=TIMET(t_start(i):t_stop(i)); % vecteur temps en conditions tempête
    New_HST(t_start(i):t_stop(i))=HST(t_start(i):t_stop(i));
end
                               
%Calcul du temps d'integration de l'energie/puissance:
for j= 1: length(TIMET)
    En(j) = (1/16* densi*g *(New_HST(j)^2))*3; 
    Pu(j)=((1/(64*pi))*densi*(g^2)*(New_HST(j)^2)*TP(j))*3;
end

ss=find(SCWmS<0 );

EN=zeros(1,length(TIMET));
PU=zeros(1,length(TIMET));
EN(ss)=En(ss);
PU(ss)=Pu(ss);
en=EN; % Valeur utilisé pour les variations du proxy
for i=ini:fin-1  
ti=findnearest(t_profil(i),TIMET);
tf=findnearest(t_profil(i+1),TIMET);
ENC(i)=sum(EN(ti:tf));
PUC(i)=sum(PU(ti:tf));
ECC(ti:tf)=ENC(i);%ECC valeur pour visualiser les Energies
PUCC(ti:tf)=PUC(i);%PUCC valeur pour visualiser les Puissance
end

ENC=ENC/1000000; %passage de J à MJ
PUC=PUC/1000000; %passage de W à MW

%Volumes /Recul (tout le profil)
for i=ini:fin
Int(i)=trapz(x,z(i,:)); %Volume en stock avant la tempête
Proxy(i)=x(findnearest(2.54,z(i,:))); %Proxy PHMA
end
for i=ini:fin-1
V_err(i)=Int(i)-Int(i+1); % Volume erodé pendant la tempête
Recul(i)=Proxy(i)-Proxy(i+1) % Evolution cross-sh de la PHMA
end

%Supression des valeurs pour lesquelles le runup ne dépasse pas le seuil:
oo=find(ENC==0);
ENC(oo)=0;
V_err(oo)=[];
PUC(oo)=[];
Int(oo)=[];
Int(length(Int))=[]; %permet d'uniformiser les volumes errodés et dispos


%Proxy modéliser
ReculTh=COEFF_Mod(1)*ENC +COEFF_Mod(2)
proxy(ini)=x(findnearest(2.54,z(ini,:)))+20; %Proxy PHMA
for i=ini:fin-1
proxy(i+1)=proxy(i)- ReculTh(i)
end
figure
plot(t_profil(ini:fin),proxy(ini:fin),'LineWidth',2)

%Proxy mesuré
for i =ini:fin
proxy_Exp(i)=x(findnearest(2.54,z(i,:)))
end
hold on
plot(t_profil(ini:fin),proxy_Exp(ini:fin),'r','LineWidth',2)


%Proxy pour toutes les années
